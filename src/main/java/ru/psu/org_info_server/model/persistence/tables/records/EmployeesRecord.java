/*
 * This file is generated by jOOQ.
 */
package ru.psu.org_info_server.model.persistence.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import ru.psu.org_info_server.model.persistence.tables.Employees;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeesRecord extends UpdatableRecordImpl<EmployeesRecord> implements Record4<UUID, String, UUID, UUID> {

    private static final long serialVersionUID = 1592570716;

    /**
     * Setter for <code>info.employees.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>info.employees.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>info.employees.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>info.employees.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>info.employees.organization</code>.
     */
    public void setOrganization(UUID value) {
        set(2, value);
    }

    /**
     * Getter for <code>info.employees.organization</code>.
     */
    public UUID getOrganization() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>info.employees.chief</code>.
     */
    public void setChief(UUID value) {
        set(3, value);
    }

    /**
     * Getter for <code>info.employees.chief</code>.
     */
    public UUID getChief() {
        return (UUID) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, UUID, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, UUID, UUID> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Employees.EMPLOYEES.ID;
    }

    @Override
    public Field<String> field2() {
        return Employees.EMPLOYEES.NAME;
    }

    @Override
    public Field<UUID> field3() {
        return Employees.EMPLOYEES.ORGANIZATION;
    }

    @Override
    public Field<UUID> field4() {
        return Employees.EMPLOYEES.CHIEF;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public UUID component3() {
        return getOrganization();
    }

    @Override
    public UUID component4() {
        return getChief();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public UUID value3() {
        return getOrganization();
    }

    @Override
    public UUID value4() {
        return getChief();
    }

    @Override
    public EmployeesRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public EmployeesRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public EmployeesRecord value3(UUID value) {
        setOrganization(value);
        return this;
    }

    @Override
    public EmployeesRecord value4(UUID value) {
        setChief(value);
        return this;
    }

    @Override
    public EmployeesRecord values(UUID value1, String value2, UUID value3, UUID value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EmployeesRecord
     */
    public EmployeesRecord() {
        super(Employees.EMPLOYEES);
    }

    /**
     * Create a detached, initialised EmployeesRecord
     */
    public EmployeesRecord(UUID id, String name, UUID organization, UUID chief) {
        super(Employees.EMPLOYEES);

        set(0, id);
        set(1, name);
        set(2, organization);
        set(3, chief);
    }
}
